version: '3.8'

services:
  app:
    build:
      context: .
      args:
        - APP_ENV
    command: npm run start:dev
    ports:
      - 3000:3000
    volumes:
      - ./:/usr/src/app
      - node_modules:/usr/src/app/node_modules/
    environment:
      APP_ENV: ${APP_ENV}
      APP_PORT: ${APP_PORT}
      DB_HOST: mysqldb
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      JWT_ACCESS_TOKEN_EXP_IN_SEC: ${JWT_ACCESS_TOKEN_EXP_IN_SEC}
      JWT_REFRESH_TOKEN_EXP_IN_SEC: ${JWT_REFRESH_TOKEN_EXP_IN_SEC}
      JWT_PUBLIC_KEY_BASE64: ${JWT_PUBLIC_KEY_BASE64}
      JWT_PRIVATE_KEY_BASE64: ${JWT_PRIVATE_KEY_BASE64}
      DEFAULT_ADMIN_USER_PASSWORD: ${DEFAULT_ADMIN_USER_PASSWORD}
    depends_on:
      - mysqldb
      - redis
      - minio
      - reverse-proxy

  mysqldb:
    image: mysql:latest
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
    volumes:
      - ${DATA_PATH_HOST}/mysqldb:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASS}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      MYSQL_DATABASE: ${DB_NAME}

  redis:
    image: 'redis:alpine'
    restart: unless-stopped
    command: --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - ${DATA_PATH_HOST}/redis:/data

  minio:
    image: quay.io/minio/minio:latest
    restart: unless-stopped
    command: server /data --address ":9000" --console-address ":9001"
    expose:
      - 9000
      - 9001
    environment:
      MINIO_ROOT_USER: ${AWS_S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${AWS_S3_SECRET_KEY}
      # Do NOT use MINIO_DOMAIN or MINIO_SERVER_URL with Traefik.
      # All Routing is done by Traefik, just tell minio where to redirect to.
      MINIO_BROWSER_REDIRECT_URL: http://${MINIO_CONSOLE_DOMAIN}
    volumes:
      - ${DATA_PATH_HOST}/minio:/data
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      traefik-public:
    depends_on:
      - reverse-proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.minio-console-http.rule=Host(`${MINIO_CONSOLE_DOMAIN?Variable not set}`)
      - traefik.http.routers.minio-console-http.entrypoints=http
      # - traefik.http.routers.minio-console-http.middlewares=https-redirect
      - traefik.http.routers.minio-console-http.service=minio-console
      # - traefik.http.routers.minio-console-https.rule=Host(`${MINIO_CONSOLE_DOMAIN?Variable not set}`)
      # - traefik.http.routers.minio-console-https.entrypoints=https
      # - traefik.http.routers.minio-console-https.tls=true
      # - traefik.http.routers.minio-console-https.tls.certresolver=le
      # - traefik.http.routers.minio-console-https.service=minio-console
      - traefik.http.services.minio-console.loadbalancer.server.port=9001

      - traefik.http.routers.minio-http.rule=Host(`${MINIO_DOMAIN?Variable not set}`)
      - traefik.http.routers.minio-http.entrypoints=http
      # - traefik.http.routers.minio-http.middlewares=https-redirect
      - traefik.http.routers.minio-http.service=minio
      # - traefik.http.routers.minio-https.rule=Host(`${MINIO_DOMAIN?Variable not set}`)
      # - traefik.http.routers.minio-https.entrypoints=https
      # - traefik.http.routers.minio-https.tls=true
      # - traefik.http.routers.minio-https.tls.certresolver=le
      # - traefik.http.routers.minio-https.service=minio
      - traefik.http.services.minio.loadbalancer.server.port=9000

  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.8
    # Enables the web UI and tells Traefik to listen to docker
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      # - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable TRAEFIK_EMAIL
      - --certificatesresolvers.le.acme.email=${TRAEFIK_EMAIL?Variable not set}
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80
      # Listen on port 443, default for HTTPS
      - 443:443
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_PATH_HOST}/ssl:/certificates
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      traefik-public:
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Use the custom label "traefik.constraint-label=traefik-public"
      # This public Traefik will only use services with this label
      # That way you can add other internal Traefik instances per stack if needed
      - traefik.constraint-label=traefik-public
      # admin-auth middleware with HTTP Basic auth
      # Using the environment variables TRAEFIK_USERNAME and TRAEFIK_PASSWORD
      - traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_USERNAME?Variable not set}:${TRAEFIK_PASSWORD?Variable not set}
      # https-redirect middleware to redirect HTTP to HTTPS
      # It can be re-used by other stacks in other Docker Compose files
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # traefik-http set up only to use the middleware to redirect to https
      # Uses the environment variable TRAEFIK_DOMAIN
      - traefik.http.routers.traefik-public-http.rule=Host(`${TRAEFIK_DOMAIN?Variable not set}`)
      - traefik.http.routers.traefik-public-http.entrypoints=http
      - traefik.http.routers.traefik-public-http.middlewares=https-redirect
      # traefik-https the actual router using HTTPS
      # Uses the environment variable TRAEFIK_DOMAIN
      - traefik.http.routers.traefik-public-https.rule=Host(`${TRAEFIK_DOMAIN?Variable not set}`)
      - traefik.http.routers.traefik-public-https.entrypoints=https
      - traefik.http.routers.traefik-public-https.tls=true
      # Use the special Traefik service api@internal with the web UI/Dashboard
      - traefik.http.routers.traefik-public-https.service=api@internal
      # Use the "le" (Let's Encrypt) resolver created below
      - traefik.http.routers.traefik-public-https.tls.certresolver=le
      # Enable HTTP Basic auth, using the middleware created above
      - traefik.http.routers.traefik-public-https.middlewares=admin-auth
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-public.loadbalancer.server.port=8080

volumes:
  node_modules:
  mysqldb:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  minio:
    driver: ${VOLUMES_DRIVER}
  ssl:
    driver: ${VOLUMES_DRIVER}

networks:
  traefik-public:
    # external: true
  net:
    driver: overlay
    attachable: true
